# Multi-stage Docker build for SyncBoard Production
# This Dockerfile creates an optimized production image

# =============================================================================
# Stage 1: Build Dependencies
# =============================================================================
FROM node:18-alpine AS dependencies

# Install system dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    postgresql-client \
    redis-tools

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY vite.config.ts ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# =============================================================================
# Stage 2: Build Application
# =============================================================================
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    postgresql-client

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY vite.config.ts ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./

# Install all dependencies (including dev dependencies)
RUN npm ci

# Copy source code
COPY client/ ./client/
COPY server/ ./server/
COPY shared/ ./shared/
COPY scripts/ ./scripts/

# Build the application
RUN npm run build

# =============================================================================
# Stage 3: Production Image
# =============================================================================
FROM node:18-alpine AS production

# Create app user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S syncboard -u 1001

# Install production dependencies
RUN apk add --no-cache \
    postgresql-client \
    redis-tools \
    curl \
    dumb-init

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=syncboard:nodejs /app/dist ./dist
COPY --from=builder --chown=syncboard:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=syncboard:nodejs /app/package*.json ./

# Copy production environment file
COPY --chown=syncboard:nodejs .env.production ./.env

# Create logs directory
RUN mkdir -p /app/logs && chown syncboard:nodejs /app/logs

# Create uploads directory
RUN mkdir -p /app/uploads && chown syncboard:nodejs /app/uploads

# Create cache directory
RUN mkdir -p /app/cache && chown syncboard:nodejs /app/cache

# Set environment variables
ENV NODE_ENV=production
ENV PORT=5000
ENV HOST=0.0.0.0

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Switch to non-root user
USER syncboard

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/index.js"]

# =============================================================================
# Stage 4: Development Image (Optional)
# =============================================================================
FROM node:18-alpine AS development

# Install development dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    postgresql-client \
    redis-tools \
    git

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY vite.config.ts ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./

# Install all dependencies
RUN npm ci

# Copy source code
COPY . .

# Create logs directory
RUN mkdir -p /app/logs

# Expose port
EXPOSE 5000

# Start development server
CMD ["npm", "run", "dev"]

# =============================================================================
# Docker Compose for Production
# =============================================================================
# Create docker-compose.prod.yml for production deployment